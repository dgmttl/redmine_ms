if tracker_id == 1 && project.contracts.any? { |contract| contract.id == 14 }
 
    
    puts "++++++++++++++++++++ requested_versions_is #{requested_versions_is}"
    puts "++++++++++++++++++++ requested_versions_was #{requested_versions_was}"
 
 
 if requested_versions_changed?
    # Calcula os IDs adicionados ou removidos
    requested = requested_versions_is - requested_versions_was
    approved = requested_versions_was - requested_versions_is

    puts "requested: #{requested}"
    puts "approved: #{approved}"
    puts "story_ids(requested): #{stories_by_version_ids(requested).pluck(:id)}"
    puts "story_ids(approved): #{stories_by_version_ids(approved).pluck(:id)}"
    puts "parent_id: #{id}"

    puts "requested.present?: #{requested.present?}"
    puts "approved.present?: #{approved.present?}"

    # Atualiza os status para "requested" se houver mudanças
    if requested.present?
      Version.where(id: requested).update_all(status: 'requested')
      stories_by_version_ids(requested).each do |story|
        story.parent = @issue
        @stories_to_save_after << story
      end
    end

    # Atualiza os status para "approved" e remove parent_id se houver mudanças
    if approved.present?
      Version.where(id: approved).update_all(status: 'approved')
    #   Issue.where(id: stories_by_version_ids(approved)).update_all(parent_id: nil)
    end
  end

end
